version: '3.8'

services:
  #--- Base de datos relacional (Primaria) ---
  postgres-primary:
    image: postgres:15
    container_name: postgres-primary
    hostname: postgres-primary
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_REPLICA_USER: ${POSTGRES_REPLICA_USER}
      POSTGRES_REPLICA_PASSWORD: ${POSTGRES_REPLICA_PASSWORD}
    volumes:
      - ./postgres-init:/docker-entrypoint-initdb.d
      - postgres_primary_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" 
    command: postgres -c wal_level=replica -c hot_standby=on -c max_wal_senders=10 -c max_replication_slots=10 -c hot_standby_feedback=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - sofipo-net

  #--- Base de datos relacional (Réplica) ---
  postgres-replica:
    image: postgres:15
    container_name: postgres-replica
    depends_on:
      postgres-primary:
        condition: service_healthy 
    environment:
      POSTGRES_USER: ${POSTGRES_USER} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICA_USER: ${POSTGRES_REPLICA_USER}
      POSTGRES_REPLICA_PASSWORD: ${POSTGRES_REPLICA_PASSWORD}
      PGPASSWORD: ${POSTGRES_REPLICA_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgres-replica-config:/docker-entrypoint-initdb.d
    command: ["/docker-entrypoint-initdb.d/init-db.sh"]
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p 5432"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - sofipo-net

  #--- Servicio de mensajería (RabbitMQ) ---
  rabbitmq:
    image: rabbitmq:3.11-management 
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672" 
      - "15672:15672" 
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/ 
    networks:
      - sofipo-net

  #--- Servicio de caché (Redis) ---
  redis:
    image: redis:7-alpine 
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379" 
    volumes:
      - redis-data:/data 
    networks:
      - sofipo-net

  #--- Base de datos de documentos (CouchDB) ---
  couchdb:
    image: couchdb:3.3
    container_name: couchdb
    hostname: couchdb
    ports:
      - "5984:5984" 
    environment:
      COUCHDB_USER: ${COUCHDB_USER} 
      COUCHDB_PASSWORD: ${COUCHDB_PASSWORD}
      COUCHDB_ADMIN_PASSWORD: ${COUCHDB_PASSWORD}
    volumes:
      - couchdb-data:/opt/couchdb/data 
    healthcheck: 
      test: ["CMD-SHELL", "curl -f http://localhost:5984 || exit 1"]
      interval: 10s  
      timeout: 10s   
      retries: 10    
      start_period: 30s 
    networks:
      - sofipo-net

  #--- Aplicación Backend API ---
  backend-api:
    build: ./backend-api 
    container_name: backend-api
    hostname: backend-api
    env_file: .env 
    ports:
      - "8000:8000" 
    depends_on: 
      postgres-primary:
        condition: service_healthy 
      postgres-replica:
        condition: service_healthy 
      rabbitmq:
        condition: service_started 
      redis:
        condition: service_started
      couchdb:
        condition: service_healthy 
    networks:
      - sofipo-net

  #--- Aplicación Event Consumer ---
  event-consumer:
    build: ./event-consumer 
    container_name: event-consumer
    hostname: event-consumer
    env_file: .env 
    depends_on: 
      rabbitmq:
        condition: service_started 
      couchdb:
        condition: service_healthy 
    networks:
      - sofipo-net

# Definición de volúmenes nombrados 
volumes:
  postgres_primary_data:
  postgres_replica_data:
  rabbitmq-data:
  redis-data:
  couchdb-data:

# Definición de la red personalizada para los servicios
networks:
  sofipo-net:
    driver: bridge
