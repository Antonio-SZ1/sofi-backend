version: '3.8'

services:
  #--- Base de datos relacional ---
  postgres-primary:
    image: postgres:15
    container_name: postgres-primary
    hostname: postgres-primary
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      # Montamos la carpeta para scripts de inicialización del primary (ej. schema.sql).
      # ¡Asegúrate de que '99-replication.sh' y 'init-db.sh' NO estén en 'postgres-init' ahora!
      - ./postgres-init:/docker-entrypoint-initdb.d
      # Usamos un volumen nombrado de Docker para los datos del primary
      - postgres_primary_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command: postgres -c wal_level=replica -c hot_standby=on -c max_wal_senders=10 -c max_replication_slots=10 -c hot_standby_feedback=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sofipo-net

  postgres-replica:
    image: postgres:15
    container_name: postgres-replica
    depends_on:
      postgres-primary:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      # Usamos un volumen nombrado de Docker para los datos de la réplica
      - postgres_replica_data:/var/lib/postgresql/data
      # ¡IMPORTANTE! Montamos la nueva carpeta con los scripts de configuración de la réplica
      - ./postgres-replica-config:/docker-entrypoint-initdb.d
    # El comando ahora ejecutará los scripts dentro de /docker-entrypoint-initdb.d
    # que ahora solo contiene los scripts de réplica.
    command: ["/docker-entrypoint-initdb.d/init-db.sh"] # O si 99-replication.sh es el principal, ajusta aquí
    networks:
      - sofipo-net

  #--- Servicios de mensajeria, cache y documentos ---
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
    networks:
      - sofipo-net

  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - sofipo-net

  couchdb:
    image: couchdb:3.3
    container_name: couchdb
    hostname: couchdb
    ports:
      - "5984:5984"
    environment:
      COUCHDB_USER: ${COUCHDB_USER}
      COUCHDB_PASSWORD: ${COUCHDB_PASSWORD}
      COUCHDB_ADMIN_PASSWORD: ${COUCHDB_PASSWORD}
    volumes:
      - couchdb-data:/opt/couchdb/data
      - ./couchdb-init/setup-users-db.sh:/opt/couchdb/setup-users-db.sh
    # ¡IMPORTANTE! Usar el entrypoint real de la imagen de CouchDB y luego ejecutar nuestro script
    entrypoint: ["/bin/bash", "-c", "/opt/couchdb/bin/docker-entrypoint.sh /opt/couchdb/setup-users-db.sh"]
    networks:
      - sofipo-net

  #--- Aplicaciones ---
  backend-api:
    build: ./backend-api
    container_name: backend-api
    hostname: backend-api
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      - postgres-primary
      - postgres-replica
      - rabbitmq
      - redis
      - couchdb
    networks:
      - sofipo-net

  event-consumer:
    build: ./event-consumer
    container_name: event-consumer
    hostname: event-consumer
    env_file: .env
    depends_on:
      - rabbitmq
      - couchdb
    networks:
      - sofipo-net

# Definición de volúmenes nombrados
volumes:
  postgres_primary_data:
  postgres_replica_data:
  rabbitmq-data:
  redis-data:
  couchdb-data:

networks:
  sofipo-net:
    driver: bridge
